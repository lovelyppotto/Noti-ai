pipeline {
  agent any

  environment {
    DOCKER_IMAGE = "sseon701/noti-ai"
    DOCKER_TAG = "latest"
    SSH_USER = "ubuntu"
    SSH_CREDENTIAL = 'ec2'
    GIT_REPO = 'https://lab.ssafy.com/noti/noti-ai.git'
  }

  stages {
    stage('Checkout Code') {
      steps {
        git branch: 'develop',
            url: "${GIT_REPO}",
            credentialsId: 'GITLAB_CREDENTIALS_ID'
      }
    }

    stage('Build & Push Docker Image') {
      steps {
        script {
          withCredentials([
            string(credentialsId: 'DOCKER_USERNAME', variable: 'DOCKER_USERNAME'),
            string(credentialsId: 'DOCKER_PASSWORD', variable: 'DOCKER_PASSWORD')
          ]) {
            sh '''
              docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .  # 캐시 활용
              echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
              docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
            '''
          }
        }
      }
    }

    stage('Upload .env to EC2 (skip if exists)') {
      steps {
        script {
          withCredentials([
            string(credentialsId: 'EC2_IP', variable: 'EC2_IP'),
            string(credentialsId: 'MONGODB_URI', variable: 'MONGODB_URI'),
            string(credentialsId: 'MONGODB_DB_NAME', variable: 'MONGODB_DB_NAME'),
            string(credentialsId: 'REDIS_HOST', variable: 'REDIS_HOST'),
            string(credentialsId: 'REDIS_PORT', variable: 'REDIS_PORT'),
            string(credentialsId: 'REDIS_USERNAME', variable: 'REDIS_USERNAME'),
            string(credentialsId: 'REDIS_PASSWORD', variable: 'REDIS_PASSWORD'),
            string(credentialsId: 'REDIS_DB_BROKER', variable: 'REDIS_DB_BROKER'),
            string(credentialsId: 'REDIS_DB_BACKEND', variable: 'REDIS_DB_BACKEND'),
            string(credentialsId: 'OPENAI_API_KEY', variable: 'OPENAI_API_KEY')
          ]) {
            // 보안 경고를 해결하기 위한 환경 변수 생성 방식 변경
            def envVars = [
              "MONGODB_URI=${MONGODB_URI}",
              "MONGODB_DB_NAME=${MONGODB_DB_NAME}",
              "REDIS_HOST=${REDIS_HOST}",
              "REDIS_PORT=${REDIS_PORT}",
              "REDIS_USERNAME=${REDIS_USERNAME}",
              "REDIS_PASSWORD=${REDIS_PASSWORD}",
              "REDIS_DB_BROKER=${REDIS_DB_BROKER}",
              "REDIS_DB_BACKEND=${REDIS_DB_BACKEND}",
              "OPENAI_API_KEY=${OPENAI_API_KEY}"
            ]
            writeFile file: '.env', text: envVars.join('\n')

            sshagent(credentials: [SSH_CREDENTIAL]) {
              // 첫 번째 명령어: 환경 파일 존재 여부 확인
              def exitCode = sh(script: '''
                ssh -o StrictHostKeyChecking=no ${SSH_USER}@${EC2_IP} '
                  mkdir -p ~/noti-ai
                  if [ ! -f ~/noti-ai/.env ]; then
                    echo "Uploading .env..."
                    exit 100
                  else
                    echo ".env already exists, skipping upload."
                    exit 0
                  fi
                '
              ''', returnStatus: true)
              
              // exitCode가 100이면 .env 파일이 없으므로 업로드
              if (exitCode == 100) {
                sh '''
                  scp -o StrictHostKeyChecking=no .env ${SSH_USER}@${EC2_IP}:~/noti-ai/.env
                '''
              }
            }
          }
        }
      }
    }

    stage('Deploy to GPU Server') {
      steps {
        script {
          withCredentials([string(credentialsId: 'EC2_IP', variable: 'EC2_IP')]) {
            sshagent(credentials: [SSH_CREDENTIAL]) {
              sh '''
                ssh -o StrictHostKeyChecking=no ${SSH_USER}@${EC2_IP} '
                  cd ~/noti-ai
                  docker compose down || true
                  docker compose pull
                  docker compose up -d
                '
              '''
            }
          }
        }
      }
    }

    stage('Cleanup Docker') {
      steps {
        script {
          withCredentials([string(credentialsId: 'EC2_IP', variable: 'EC2_IP')]) {
            sshagent(credentials: [SSH_CREDENTIAL]) {
              sh '''
                ssh -o StrictHostKeyChecking=no ${SSH_USER}@${EC2_IP} '
                  docker image prune -af
                  docker container prune -f
                  docker volume prune -f
                  docker builder prune -af
                  sudo journalctl --vacuum-time=3d || true
                '
              '''
            }
          }
        }
      }
    }

    stage('Verify Deployment') {
      steps {
        script {
          withCredentials([string(credentialsId: 'EC2_IP', variable: 'EC2_IP')]) {
            sshagent(credentials: [SSH_CREDENTIAL]) {
              sh '''
                ssh -o StrictHostKeyChecking=no ${SSH_USER}@${EC2_IP} '
                  echo "===== Container Status ====="
                  docker ps | grep noti-ai || echo "noti-ai not running"
                  echo "\n===== Logs (Last 10 lines) ====="
                  docker logs noti-ai --tail 10 || true
                  docker logs noti-celery-worker --tail 10 || true
                  echo "\n===== GPU Status ====="
                  nvidia-smi --query-gpu=index,name,utilization.gpu,memory.used,memory.total --format=csv,noheader || echo "GPU not found"
                '
              '''
            }
          }
        }
      }
    }

    stage('Notify Success') {
      steps {
        script {
          def commitMessage = sh(script: "git log -1 --pretty=format:%s", returnStdout: true).trim()
          def commitAuthor = sh(script: "git log -1 --pretty=format:%an", returnStdout: true).trim()
          def commitHash = sh(script: "git log -1 --pretty=format:%h", returnStdout: true).trim()
          def buildTime = new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone("Asia/Seoul"))

          withCredentials([string(credentialsId: 'MATTERMOST_URL', variable: 'MATTERMOST_WEBHOOK')]) {
            def jsonContent = """
            {
              "text": ":rocket: **AI 서버 배포 완료!**\\n\\n:label: 브랜치: develop\\n:package: 도커 이미지: ${DOCKER_IMAGE}:${DOCKER_TAG}\\n:bust_in_silhouette: 작성자: ${commitAuthor}\\n:page_facing_up: 커밋 메시지: ${commitMessage}"
            }
            """
            writeFile file: 'notify-ai-success.json', text: jsonContent

            sh '''
              curl_response=$(curl -s -w "\\n%{http_code}" -X POST -H "Content-Type: application/json" -d @notify-ai-success.json $MATTERMOST_WEBHOOK)
              status_code=$(echo "$curl_response" | tail -n1)
              if [ "$status_code" -ne 200 ]; then
                echo "Failed to send Mattermost notification"
                exit 1
              fi
            '''
          }
        }
      }
    }
  }

  post {
    failure {
      script {
        def commitMessage = sh(script: "git log -1 --pretty=format:%s", returnStdout: true).trim()
        def commitAuthor = sh(script: "git log -1 --pretty=format:%an", returnStdout: true).trim()

        withCredentials([string(credentialsId: 'MATTERMOST_URL', variable: 'MATTERMOST_WEBHOOK')]) {
          def jsonContent = """
          {
            "text": ":x: **AI 서버 배포 실패!**\\n\\n:bust_in_silhouette: 작성자: ${commitAuthor}\\n:page_facing_up: 커밋 메시지: ${commitMessage}\\n:link: <${BUILD_URL}|빌드 상세 보기>\\n@sunju701"
          }
          """
          writeFile file: 'notify-ai-failure.json', text: jsonContent

          // 실패 시 알림 전송 명령 수정 - returnStatus 추가
          sh(script: '''
            curl -s -X POST -H "Content-Type: application/json" -d @notify-ai-failure.json $MATTERMOST_WEBHOOK || echo "Failed to send failure notification"
          ''', returnStatus: true)
        }
      }
    }
  }
}